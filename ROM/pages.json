{
    "PCDSettings":{
        "drawBorders":[
            "return function(self)",
            "    self.display.setViewport()",
            "    local screenHeight = (self.pageHeight+self.ICAWS_Height+1)*self.unitSize",
            "    local screenWidth = self.display.getWidth()",
            "    local gapHeight = self.display.getHeight() - screenHeight",
            "    self.display.fillRect(0, screenHeight, screenWidth, gapHeight, '000000')",
            "    for i = 0, 3 do",
            "        local panel = panels[i+1]",
            "        if panel.hidden == false then",
            "            local expy = 0",
            "            local expx = 0",
            "            if panel.exp.y then",
            "                expy = self.unitSize*1",
            "            end",
            "            if panel.exp.x then ",
            "                expx = self.unitSize*self.pageWidth",
            "                if i == 1 or i == 3 then",
            "                    expx = -expx",
            "                end",
            "            end",
            "            if i == 0 or i == 2 then",
            "                if panel.exp.y then",
            "                    local x, y, w, h = self:drawTri('up', ",
            "                    ((i * self.pageWidth)*self.unitSize) + (self.triWidth/2) + self.triBorder,",
            "                    (self.ICAWS_Height*self.unitSize) + ((self.pageHeight+1)*self.unitSize) - self.triHeight - self.triBorder,",
            "                    self.colors.cyan, self.triThickness)",
            "                    setButton(1+(2*i), -1, x, y, w, h, function() expand(i+1, 'y') end)",
            "                else",
            "                    local x, y, w, h = self:drawTri('down', ",
            "                    ((i * self.pageWidth)*self.unitSize) + (self.triWidth/2) + self.triBorder,",
            "                    (self.ICAWS_Height*self.unitSize) + ((self.pageHeight+1)*self.unitSize) - self.triBorder,",
            "                    self.colors.cyan, self.triThickness)",
            "                    setButton(1+(2*i), -1, x, y, w, h, function() expand(i+1, 'y') end)",
            "                end",
            "                if panel.exp.x then",
            "                    local x, y, w, h = self:drawTri('left', ",
            "                    ((i * self.pageWidth)*self.unitSize) + (self.pageWidth*self.unitSize) - (self.triHeight) - self.triBorder + expx,",
            "                    (self.ICAWS_Height*self.unitSize) + ((self.pageHeight+1)*self.unitSize) - self.triHeight - self.triBorder,",
            "                    self.colors.cyan, self.triThickness)",
            "                    setButton(2+(2*i), -1, x, y, w, h, function() expand(i+1, 'x') end)",
            "                else",
            "                    local x, y, w, h = self:drawTri('right', ",
            "                    ((i * self.pageWidth)*self.unitSize) + (self.pageWidth*self.unitSize) - self.triBorder + expx,",
            "                    (self.ICAWS_Height*self.unitSize) + ((self.pageHeight+1)*self.unitSize) - self.triHeight - self.triBorder,",
            "                    self.colors.cyan, self.triThickness)",
            "                    setButton(2+(2*i), -1, x, y, w, h, function() expand(i+1, 'x') end)",
            "                end",
            "            else",
            "                if panel.exp.y then",
            "                    local x, y, w, h = self:drawTri('up', ",
            "                    ((i * self.pageWidth)*self.unitSize) + (self.pageWidth*self.unitSize) - (self.triWidth/2) - self.triBorder,",
            "                    (self.ICAWS_Height*self.unitSize) + ((self.pageHeight+1)*self.unitSize) - self.triHeight - self.triBorder,",
            "                    self.colors.cyan, self.triThickness)",
            "                    setButton(3+((i-1)*2), -1, x, y, w, h, function() expand(i+1, 'y') end)",
            "                else",
            "                    local x, y, w, h = self:drawTri('down', ",
            "                    ((i * self.pageWidth)*self.unitSize) + (self.pageWidth*self.unitSize) - (self.triWidth/2) - self.triBorder,",
            "                    (self.ICAWS_Height*self.unitSize) + ((self.pageHeight+1)*self.unitSize) - self.triBorder,",
            "                    self.colors.cyan, self.triThickness)",
            "                    setButton(3+((i-1)*2), -1, x, y, w, h, function() expand(i+1, 'y') end)",
            "                end",
            "                if panel.exp.x then",
            "                    local x, y, w, h = self:drawTri('right', ",
            "                    ((i * self.pageWidth)*self.unitSize) + self.triHeight +  self.triBorder + expx,",
            "                    (self.ICAWS_Height*self.unitSize) + ((self.pageHeight+1)*self.unitSize) - self.triHeight - self.triBorder,",
            "                    self.colors.cyan, self.triThickness)",
            "                    setButton(4+((i-1)*2), -1, x, y, w, h, function() expand(i+1, 'x') end)",
            "                else",
            "                    local x, y, w, h = self:drawTri('left', ",
            "                    ((i * self.pageWidth)*self.unitSize) + self.triBorder + expx,",
            "                    (self.ICAWS_Height*self.unitSize) + ((self.pageHeight+1)*self.unitSize) - self.triHeight - self.triBorder,",
            "                    self.colors.cyan, self.triThickness)",
            "                    setButton(4+((i-1)*2), -1, x, y, w, h, function() expand(i+1, 'x') end)",
            "                end",
            "            end",
            "            self.display.drawRect(",
            "                ((i * self.pageWidth)*self.unitSize) - (self.borderWidth/2) + math.min(expx, 0), ",
            "                (self.ICAWS_Height*self.unitSize) - (self.borderWidth/2),",
            "                (self.pageWidth*self.unitSize) + self.borderWidth + math.abs(expx),",
            "                (self.pageHeight*self.unitSize) + self.borderWidth + expy,",
            "                self.colors.grey, self.borderWidth",
            "            )",
            "            if panel.exp.y == false then",
            "                for a = 0, panel.submenuCount-1 do",
            "                    self.display.drawRect(",
            "                        ((i*self.pageWidth)*self.unitSize) - (self.borderWidth/2) + (self.unitSize*a) + math.min(expx, 0),",
            "                        (self.ICAWS_Height*self.unitSize) - (self.borderWidth/2) + (self.pageHeight*self.unitSize),",
            "                        self.unitSize,",
            "                        self.unitSize,",
            "                        self.colors.grey, self.borderWidth",
            "                    )",
            "                end",
            "            end",
            "        else",
            "            setButton((i+1)*2, -1, 0, 0, 0, 0, function() end)",
            "            setButton(((i+1)*2)-1, -1, 0, 0, 0, 0, function() end)",
            "        end",
            "    end",
            "    self.display.drawLine(self.cursor.x - self.cursorSize, self.cursor.y, self.cursor.x - self.cursorSpacing, self.cursor.y, self.colors.green, self.cursorThickness)",
            "    self.display.drawLine(self.cursor.x, self.cursor.y - self.cursorSize, self.cursor.x, self.cursor.y - self.cursorSpacing, self.colors.green, self.cursorThickness)",

            "    self.display.drawLine(self.cursor.x + self.cursorSize, self.cursor.y, self.cursor.x + self.cursorSpacing, self.cursor.y, self.colors.green, self.cursorThickness)",
            "    self.display.drawLine(self.cursor.x, self.cursor.y + self.cursorSize, self.cursor.x, self.cursor.y + self.cursorSpacing, self.colors.green, self.cursorThickness)",
            "end"
        ]
    },
    "blank":{
        "render":[
                "return function(self, panel, subpanel)",
                "   local disp = PCDSettings.display",
                "   local x, y, w, h, hidden, subpanels = PCDSettings:getPanelPositions(panel)",
                "   if subpanel ~= nil then",
                "       spanel = subpanels[subpanel]",
                "       x, y, w, h = spanel.x, spanel.y, spanel.w, spanel.h",
                "   end",
                "   disp.setViewport(x, y, w, h)",
                "   disp.fillRect(x, y, w, h, '000000')",
                "   PCDSettings:drawNavButton(x, y, 'BNK', panel)",
                "end"
                ],
        "subrender":[
                    "return function(self, panel, subpanel)",
                    "   local disp = PCDSettings.display",
                    "   local x, y, w, h, hidden, subpanels = PCDSettings:getPanelPositions(panel)",
                    "   if subpanel ~= nil then",
                    "       spanel = subpanels[subpanel]",
                    "       x, y, w, h = spanel.x, spanel.y, spanel.w, spanel.h",
                    "   end",
                    "   disp.setViewport(x, y, w, h)",
                    "   disp.fillRect(x, y, w, h, '00000')",
                    "end"
                    ]
    },
    "menus":{
        "render":[
            "return function(self, panel)",
            "   local disp = PCDSettings.display",
            "   local x, y, w, h, hidden, subpanels = PCDSettings:getPanelPositions(panel)",
            "   disp.setViewport(x, y, w, h)",
            "   disp.fillRect(x, y, w, h, '000000')",

            "   local boxWidth = 128",
            "   local boxHeight = 96",
            "   local boxColor = PCDSettings.colors.cyan",
            "   local columns = math.floor(w/boxWidth)-1",
            "   local rows = math.min(math.floor(h/boxHeight)-1, 5)",
            "   local index = 1",
            "   local scale = 1.1",
            "   disp.setFontScale(scale, scale)",
            "   disp.setFont(PCDSettings.fontBD)",
            "   for by = 0, rows do",
            "       for bx = 0, columns do",
            "           disp.drawRect(x + (bx*boxWidth), y + (by*boxHeight), boxWidth, boxHeight, boxColor, 2)",
            "           local text = self.list[index]",
            "           setButton(index, panel, x + (bx*boxWidth), y + (by*boxHeight), boxWidth, boxHeight, function() setPanel(panel, pages[text]) end)",
            "           --window:createButton(x + (bx*boxWidth), y + (by*boxHeight), boxWidth, boxHeight, false, self.list[index])",
            "           if self.list[index] ~= nil then",
            "               disp.drawCenteredText(x + (bx*boxWidth) + (boxWidth/2), y + (by*boxHeight) + (boxHeight/2), string.upper(self.list[index]), boxColor)",
            "               ",
            "               index = index + 1",
            "           end",
            "       end",
            "   end",
            "   --print(x, y)",
            "   --print(w, h)",
            "end"
        ]
    },
    "CKLST":{
        "render":[],
        "subrender":[]
    },
    "ENG":{
        "round":[
            "return function(num, dig)",
            "   local exp = 10^dig",
            "   return math.floor(num*exp)/exp",
            "end"
        ],
        "drawGauge":[
            "return function(self, disp, x, y, scale, stroke, name, currentValue, maxValue, dispNum, redLineLimit, viewport)",
            "   currentValue = currentValue or 0",
            "   radius = 70 * scale",

            "   disp.setFont(PCDSettings.fontBD)",
            "   local fontScale = scale*2",
            "   disp.setFontScale(fontScale, fontScale)",
            "   local tw, th = disp.calcTextBox(currentValue)",
            "   ",
            "   disp.drawCircleVeryEvenly(x, y, radius, PCDSettings.colors.green, stroke)",
            "   disp.fillRect(x-radius, y - radius, radius, radius, PCDSettings.colors.black)",

            "   if redLineLimit ~= nil and redLineLimit > maxValue and (viewport ~= nil and viewport.x ~= nil and viewport.y ~= nil and viewport.w ~= nil and viewport.h ~= nil) then",
            "       disp.setInlineViewport(x - radius, y - (radius/2), radius, radius/2)",
            "       disp.drawCircleVeryEvenly(x, y, radius, PCDSettings.colors.red, stroke)",
            "       disp.setViewport(viewport.x, viewport.y, viewport.w, viewport.h)",
            "   end",

            "   local stopLineLength = 20 * scale",
            "   disp.drawLine(x - radius - stopLineLength, y, x - radius, y, PCDSettings.colors.green, stroke)",
            "   disp.drawLine(x, y - radius - stopLineLength, x, y - radius, PCDSettings.colors.green, stroke)",

            "   disp.drawCenteredText(x, y + radius + (10*scale), name, PCDSettings.colors.green, true, false)",
            "   disp.drawCenteredText(x - tw - (20*scale), (y - radius), tostring(dispNum) or '', PCDSettings.colors.green, false, true)",

            "   redLineLimit = redLineLimit or maxValue",
            "   local percent = math.rad(math.min(math.max(currentValue/maxValue, 0), redLineLimit/maxValue))*270",
            "   local border = (25*scale)",
            "   local sin = (math.sin(percent)*(radius-border))",
            "   local cos = (math.cos(percent)*(radius-border))",
            "   --print(sin, cos)",
            "   disp.drawLine(x, y, x + sin, y - cos, PCDSettings.colors.green, stroke)",
            "end"
        ],
        "render":[
            "return function(self, panel)",
            "    local disp = PCDSettings.display",
            "    local x, y, w, h, hidden, subpanels = PCDSettings:getPanelPositions(panel)",
            "    disp.setViewport(x, y, w, h)",
            "    disp.fillRect(x, y, w, h, '000000')",
            "    local thrust = math.floor(CICU.systemLevels.thrust*100)",
            "    local egt = 0",
            "    local nozzle = math.floor(CICU.flightControlInputs.engineTilt*30)+30",
            "    local nozzle2 = math.floor(CICU.flightControlInputs.engineTilt*90)",
            "    local n1rpm = 0",
            "    local n2rpm = 0",
            "    local oil = 0",
            "    local ff = 0",
            "    local hyd1 = 0",
            "    local hyd2 = 0",

            "    local exp = getPanel(panel).exp",
            "    if exp.y then",
            "        if exp.x then",
            "            local xInt = w/4",
            "            local yInt = h/3",
            "            local scale = 0.6",
            "            local spacing = 0.25",
            "            local yspacing = 0.15",
            "            self:drawGauge(disp, x + (xInt*(1-spacing)), y + (yInt*(1-yspacing)), scale, 4, 'THRUST', thrust, 100, thrust, 110, {x = x, y = y, w = w, h = h})",
            "            self:drawGauge(disp, x + (xInt*2), y + (yInt*(1-yspacing)), scale, 4, 'EGT', egt, 1400, egt, 1500, {x = x, y = y, w = w, h = h})",
            "            self:drawGauge(disp, x + (xInt*(3+spacing)), y + (yInt*(1-yspacing)), scale, 4, 'NOZZLE', nozzle, 90, nozzle2)",
            "            self:drawGauge(disp, x + (xInt*(1-spacing)), y + (yInt*(2+yspacing)), scale, 4, 'N1 RPM', n1rpm, 120, n1rpm, 130, {x = x, y = y, w = w, h = h})",
            "            self:drawGauge(disp, x + (xInt*2), y + (yInt*(2+yspacing)), scale, 4, 'N2 RPM', n2rpm, 120, n2rpm, 130, {x = x, y = y, w = w, h = h})",
            "            self:drawGauge(disp, x + (xInt*(3+spacing)), y + (yInt*(2+yspacing)), scale, 4, 'OIL', oil, 150, oil, 160, {x = x, y = y, w = w, h = h})",
            "        else",
            "            local xInt = w/4",
            "            local yInt = h/3",
            "            local scale = 0.4",
            "            local spacing = 0.25",
            "            local yspacing = 0.15",
            "            self:drawGauge(disp, x + (xInt*(1-spacing)), y + (yInt*(1-yspacing)), scale, 4, 'THRUST', thrust, 100, thrust, 110, {x = x, y = y, w = w, h = h})",
            "            self:drawGauge(disp, x + (xInt*2), y + (yInt*(1-yspacing)), scale, 4, 'EGT', egt, 1400, egt, 1500, {x = x, y = y, w = w, h = h})",
            "            self:drawGauge(disp, x + (xInt*(3+spacing)), y + (yInt*(1-yspacing)), scale, 4, 'NOZZLE', nozzle, 90, nozzle2)",
            "            self:drawGauge(disp, x + (xInt*(1-spacing)), y + (yInt*(2+yspacing)), scale, 4, 'N1 RPM', n1rpm, 120, n1rpm, 130, {x = x, y = y, w = w, h = h})",
            "            self:drawGauge(disp, x + (xInt*2), y + (yInt*(2+yspacing)), scale, 4, 'N2 RPM', n2rpm, 120, n2rpm, 130, {x = x, y = y, w = w, h = h})",
            "            self:drawGauge(disp, x + (xInt*(3+spacing)), y + (yInt*(2+yspacing)), scale, 4, 'OIL', oil, 150, oil, 160, {x = x, y = y, w = w, h = h})",
            "        end",
            "    else",
            "        local xInt = w/4",
            "        local yInt = h/3",
            "        local scale = 0.4",
            "        local spacing = 0.25",
            "        local yspacing = 0.15",
            "        self:drawGauge(disp, x + (xInt*(1-spacing)), y + (yInt*(1-yspacing)), scale, 4, 'THRUST', thrust, 100, thrust, 110, {x = x, y = y, w = w, h = h})",
            "        self:drawGauge(disp, x + (xInt*2), y + (yInt*(1-yspacing)), scale, 4, 'EGT', egt, 1400, egt, 1500, {x = x, y = y, w = w, h = h})",
            "        self:drawGauge(disp, x + (xInt*(3+spacing)), y + (yInt*(1-yspacing)), scale, 4, 'NOZZLE', nozzle, 90, nozzle2)",
            "        self:drawGauge(disp, x + (xInt*(1-spacing)), y + (yInt*(2+yspacing)), scale, 4, 'N1 RPM', n1rpm, 120, n1rpm, 130, {x = x, y = y, w = w, h = h})",
            "        self:drawGauge(disp, x + (xInt*2), y + (yInt*(2+yspacing)), scale, 4, 'N2 RPM', n2rpm, 120, n2rpm, 130, {x = x, y = y, w = w, h = h})",
            "        self:drawGauge(disp, x + (xInt*(3+spacing)), y + (yInt*(2+yspacing)), scale, 4, 'OIL', oil, 150, oil, 160, {x = x, y = y, w = w, h = h})",
            "    end",
            "    PCDSettings:drawNavButton(x, y, 'ENG', panel)",
            "end"
        ]
    },
    "FCS":{
        "render":[
            "return function(self, panel)",
            "    local disp = PCDSettings.display",
            "    local x, y, w, h, hidden, subpanels = PCDSettings:getPanelPositions(panel)",
            "    disp.setViewport(x, y, w, h)",
            "    disp.fillRect(x, y, w, h, '000000')",
            "    local exp = getPanel(panel).exp",
            "    local cx = x + (w / 2)",
            "    local cy = y + (h / 2)",
            "    local topView = {",
            "        {x1 = -10, y1 = -20, x2 = 0, y2 = -10},",
            "        {x1 = -20, y1 = -10},",
            "        {x1 = -23, y1 = 45},",
            "        {x1 = -30, y1 = 20},",
            "        {x1 = -55, y1 = 60},",
            "        {x1 = -65, y1 = 150},",
            "        {x1 = -85, y1 = 185, x2 = -85, y2 = 160},",
            "        {x1 = -175, y1 = 226},",
            "        {x1 = -175, y1 = 200, x2 = -65, y2 = 150},",
            "        {x1 = -177, y1 = 270},",
            "        {x1 = -62, y1 = 320},",
            "        {x1 = -62, y1 = 280, x2 = -62, y2 = 320},",
            "        {x1 = -140, y1 = 248},",
            "        {x1 = -140, y1 = 286},",
            "        {x1 = -45, y1 = 280, x2 = -75, y2 = 350},",
            "        {x1 = -40, y1 = 310},",
            "        {x1 = -40, y1 = 350},",
            "        {x1 = -45, y1 = 380},",
            "        {x1 = -75, y1 = 400},",
            "        {x1 = -40, y1 = 350, x2 = -75, y2 = 375},",
            "        {x1 = -75, y1 = 350, x2 = -75, y2 = 400},",
            "        {x1 = -125, y1 = 400, x2 = -75, y2 = 370},",
            "        {x1 = -125, y1 = 440},",
            "        {x1 = -50, y1 = 480},",
            "        {x1 = -40, y1 = 440},",
            "        {x1 = -30, y1 = 360},",
            "        {x1 = -15, y1 = 355},",
            "        {x1 = 0, y1 = 355},",
            "        {x1 = -15, y1 = 375, x2 = -20, y2 = 355},",
            "        {x1 = 0, y1 = 375}",
            "    }",
            "    local sideView = {",
            "        {x2 = -230, y2 = 0, x1 = -190, y1 = -20},",
            "        {x1 = -165, y1 = -20},",
            "        {x1 = -115, y1 = -55},",
            "        {x1 = -90, y1 = -55},",
            "        {x1 = -60, y1 = -45},",
            "        {x2 = -60, y2 = -45, x1 = -100, y1 = -25},",
            "        {x1 = -160, y1 = -25},",
            "        {x1 = -110, y1 = -25, x2 = -115, y2 = -50},",
            "        {x1 = -20, y1 = -45, x2 = -60, y2 = -45},",
            "        {x1 = 40, y1 = -35},",
            "        {x1 = 150, y1 = -35},",
            "        {x2 = 140, y2 = 0, x1 = 190, y1 = -120},",
            "        {x1 = 240, y1 = -120},",
            "        {x1 = 220, y1 = 0},",
            "        {x1 = 140, y1 = 0},",
            "        {x1 = 150, y1 = 20, x2 = 290, y2 = 30},",
            "        {x1 = 250, y1 = 15},",
            "        {x1 = 290, y1 = 30},",
            "        {x2 = 225, y2 = -10, x1 = 235, y1 = 20},",
            "        {x1 = 200, y1 = 45},",
            "        {x1 = 200, y1 = 0},",
            "        {x1 = 200, y1 = 45},",
            "        {x1 = 150, y1 = 60},",
            "        {x1 = 20, y1 = 60},",
            "        {x1 = -100, y1 = 50},",
            "        {x1 = -170, y1 = 35},",
            "        {x1 = -230, y1 = 0}",
            "    }",
            "    local function drawLines(x, y, disp, table, color, width, mirror, scalex, scaley)",
            "        if scalex == nil then scalex = 1 end",
            "        if scaley == nil then scaley = 1 end",
            "        for index, line in pairs(table) do",
            "            if line.x2 == nil or line.y2 == nil then",
            "                line.x2, line.y2 = table[index-1].x1, table[index-1].y1",
            "            end",
            "            disp.drawLine((line.x1*scalex) + x, (line.y1*scaley) + y, (line.x2*scalex) + x, (line.y2*scaley) + y, color, (width))",
            "            if mirror then",
            "                disp.drawLine((-line.x1*scalex) + x, (line.y1*scaley) + y, (-line.x2*scalex) + x, (line.y2*scaley) + y, color, (width))",
            "            end",
            "        end",
            "    end",
            "    if exp.x then",
            "        drawLines(cx, cy-165, disp, topView, PCDSettings.colors.grey, 4, true, 1)",
            "        drawLines(cx, cy-280, disp, sideView, PCDSettings.colors.grey, 4, false, 1, 0.7)",
            "    elseif exp.y then",
            "        drawLines(cx, cy-75, disp, topView, PCDSettings.colors.grey, 3, true, 0.7, 0.7)",
            "        drawLines(cx-20, cy-220, disp, sideView, PCDSettings.colors.grey, 3, false, 0.7, 0.6)",
            "    else",
            "        drawLines(cx, cy-75, disp, topView, PCDSettings.colors.grey, 3, true, 0.7, 0.7)",
            "        drawLines(cx-20, cy-180, disp, sideView, PCDSettings.colors.grey, 3, false, 0.7, 0.6)",
            "    end",
            "    --disp.drawRect(x+10, y+100, 60, 60, PCDSettings.colors.cyan, 2)",
            "    disp.setFontScale(0.8, 0.8)",
            "    disp.setFont(PCDSettings.fontBD)",
            "    local ControlMode = (CICU.systemSettings.controlSystem == 1 and 'WASD') or 'HOTAS'",
            "    local cmx, cmy, cmw, cmh = x+30, y+(h/2)-70, 100, 100",
            "    local btx, bty, btw, bth = x+w-130, y+(h/2)-70, 100, 100",
            "    graphic.textBox(disp, cmx, cmy, cmw, cmh, 'CTRL\\nMODE\\n'..ControlMode, PCDSettings.colors.cyan, true, true, 1, false)",
            "    graphic.textBox(disp, btx, bty, btw, bth, 'BIT\\nTEST', CICU.bitTests.caution and PCDSettings.colors.grey or PCDSettings.colors.cyan, true, true, 1, false)",
            "    setButton(2, panel, cmx, cmy, cmw, cmh, function() CICU.systemSettings.controlSystem = (CICU.systemSettings.controlSystem + 1)%2 end)",
            "    setButton(3, panel, btx, bty, btw, bth, function() CICU.bitTests.caution = true end)",
            "    PCDSettings:drawNavButton(x, y, 'FCS', panel)",
            "end"
        ]
    },
    "FUEL":{
        "render":[]
    },
    "HUD":{
        "render":[],
        "subrender":[]
    },
    "SMS":{
        "render":[],
        "subrender":[]
    },
    "TFLIR":{
        "render":[
            "return function(self, panel)",
            "    local disp = PCDSettings.display",
            "    local x, y, w, h, hidden, subpanels = PCDSettings:getPanelPositions(panel)",
            "    disp.setViewport(x, y, w, h)",
            "    local camera = getComponent('camera')",
            "    camera.setImageRotation(math.rad(0))",
            "    camera.setViewport(",
            "        x + (PCDSettings.borderWidth),",
            "        y + (PCDSettings.borderWidth),",
            "        w - (PCDSettings.borderWidth/2),",
            "        math.min(h - (PCDSettings.borderWidth/2), 576)",
            "    )",
            "    camera.setDownScale(12)",
            "    camera.drawAdvanced(disp)",
            "end"
        ]
    },
    "TSD":{
        "render":[],
        "subrender":[]
    },
    "WPNS":{
        "render":[],
        "subrender":[]
    },
    "CMPS":{
        "getTimeString":[
            "return function(self, ticks)",
            "    local string = ''",
            "    local hours = ((ticks/40)/60)/60",
            "    local minutes = ((ticks/40)/60)%60",
            "    local seconds = (ticks/40)%60",
            "    if hours >= 1 then",
            "        string = math.floor(hours)..'/H '..math.floor(minutes)..'/M '..math.floor(seconds)..'/S'",
            "    elseif minutes >= 1 then",
            "        string = math.floor(minutes)..'/M '..math.floor(seconds)..'/S'",
            "    elseif seconds >= 1 then",
            "        string = math.floor(seconds)..'/S'",
            "    else",
            "        string = math.floor(ticks)..'/T'",
            "    end",
            "    return string",
            "end"
        ],
        "render":[
            "return function(self, panel, subpanel)",
            "local disp = PCDSettings.display",
            "local x, y, w, h, hidden, subpanels = PCDSettings:getPanelPositions(panel)",
            "if subpanel ~= nil then",
            "    spanel = subpanels[subpanel]",
            "    x, y, w, h = spanel.x, spanel.y, spanel.w, spanel.h",
            "end",
            "disp.setViewport(x, y, w, h)",
            "disp.fillRect(x, y, w, h, '000000')",
            "local activePCs = CICU.activeComputers",
            "local textGap",
            "local xgap",
            "local scale",
            "local maxLogs",
            "local exp = getPanel(panel).exp",
            "if exp.y then",
            "    if exp.x then",
            "        textGap = 45",
            "        disp.setFontScale(1, 1)",
            "        maxLogs = 7",
            "        xgap = 200",
            "        scale = 0.9",
            "    else",
            "        textGap = 35",
            "        disp.setFontScale(0.75, 0.75)",
            "        maxLogs = 4",
            "        xgap = 150",
            "        scale = 0.7",
            "    end",
            "else",
            "    xgap = 150",
            "    scale = 0.7",
            "    textGap = 30",
            "    disp.setFontScale(0.75, 0.75)",
            "    maxLogs = 3",
            "end",

            "for k, v in pairs(activePCs) do",
            "    --local gap = #v.name",
            "    local uptimeString = '| Uptime: '..self:getTimeString(v.env.getUptime())",
            "    disp.drawText(x + xgap/10, y + 80 + ((k-1)*textGap), v.name, PCDSettings.colors.green)",
            "    disp.drawText(x + xgap, y + 80 + ((k-1)*textGap), uptimeString, PCDSettings.colors.green)",
            "end",
            "disp.drawText(x+xgap/10, y+80 + (#activePCs*textGap), 'LOGS:', PCDSettings.colors.cyan)",
            "disp.setFontScale(scale, scale)",
            "local logs = CICU.logs",
            "local yoff = y + 80 + ((#activePCs)*textGap)",
            "local strippedLogs = {}",
            "for i = 1, maxLogs do",
            "    local max = {time = 0, string = ''}",
            "    for index, log in pairs(logs) do",
            "        if log.time > max.time then",
            "            local found = false",
            "            for k, v in pairs(strippedLogs) do",
            "                if v.time == log.time and v.string == log.string then",
            "                    found = true",
            "                end",
            "            end",
            "            if found == false then",
            "                max.time = log.time",
            "                max.string = log.string",
            "            end",
            "        end",
            "    end",
            "    table.insert(strippedLogs, {time = max.time, string = max.string})",
            "end",
            "local lines = 0",
            "for index, log in pairs(strippedLogs) do",
            "    local line = yoff + (textGap*index)",
            "    function wrapText(text, maxWidth)",
            "        local width = disp.calcTextBox(text)",
            "        if width <= maxWidth then",
            "            return {text}",
            "        end",
            "    ",
            "        local lines = {}",
            "        local start = 1",
            "        local len = #text",
            "        ",
            "        while start <= len do",
            "            local lastSpace = nil",
            "            local lastValidWidth = 0",
            "            local width = 0",
            "            local i = start",
            "            ",
            "            while i <= len do",
            "                local subText = text:sub(start, i)",
            "                width = disp.calcTextBox(subText)",
            "                ",
            "                if width > maxWidth then",
            "                    break",
            "                end",
            "                ",
            "                lastValidWidth = width",
            "                ",
            "                if text:sub(i, i) == ' ' then",
            "                    lastSpace = i",
            "                end",
            "                ",
            "                i = i + 1",
            "            end",
            "            ",
            "            if lastSpace and disp.calcTextBox(text:sub(start, lastSpace - 1)) <= maxWidth then",
            "                table.insert(lines, text:sub(start, lastSpace - 1))",
            "                start = lastSpace + 1",
            "            else",
            "                table.insert(lines, text:sub(start, i - 1))",
            "                start = i",
            "            end",
            "        end",
            "        ",
            "        return lines",
            "    end",
            "    ",

            "    local string = math.floor(log.time)..' '..log.string",
            "    local strings = wrapText(string, w - (xgap/10))",

            "    for ind, text in pairs(strings) do",
            "        disp.drawText(x + xgap/10, line + (lines*textGap), text)",
            "        if ind ~= #strings then",
            "            lines = lines + 1",
            "        end",
            "    end",
            "end",
            "PCDSettings:drawNavButton(x, y, 'CMPS', panel)",
            "end"
        ]
    },
    "STATUS":{
        "render":[
            "return function(self, panel)",
            "    local disp = PCDSettings.display",
            "    local x, y, w, h, hidden = PCDSettings:getPanelPositions(panel)",
            "    disp.setViewport(x, y, w, h)",
            "    disp.fillRect(x, y, w, h, '000000')",
            "    ",
            "    pages.ENG:drawGauge(disp, x + 100, y + (h/2), 0.4, 2, '', math.floor(CICU.flightControlInputs.engineTilt*30)+30, 90, math.floor(CICU.flightControlInputs.engineTilt*90))",
            "    setButton(2, panel, x + 100 - (h/2), y, h, h, function()",
            "       CICU.flightControlInputs.engineTilt = math.max(math.min(CICU.flightControlInputs.engineTilt + (5/90), 1), 0)",
            "    end, ",
            "    function() ",
            "       CICU.flightControlInputs.engineTilt = math.max(math.min(CICU.flightControlInputs.engineTilt - (5/90), 1), 0)",
            "    end)",
            "    local cautions = CICU.cautions",
            "    local activeCautions = {}",
            "    local cautionCount = 0",
            "    for name, bool in pairs(cautions) do",
            "        if bool then",
            "            table.insert(activeCautions, name)",
            "            cautionCount = cautionCount + 1",
            "        end",
            "    end",
            "    if cautionCount > 0 then",
            "        local cautionBoxWidth = (PCDSettings.pageWidth/3)*PCDSettings.unitSize",
            "        local cautionBoxHeight = (h/2)-2",
            "        local cautionX = ((PCDSettings.pageWidth*1.5)*PCDSettings.unitSize)-(cautionBoxWidth/2)",
            "        disp.fillRect(cautionX, y, cautionBoxWidth, cautionBoxHeight, PCDSettings.colors.yellow)",
            "        disp.setFontScale(0.8, 1.2)",
            "        disp.setFont(PCDSettings.fontBD)",
            "        disp.drawCenteredText(cautionX + (cautionBoxWidth/2), cautionBoxHeight/2, 'CAUTION', PCDSettings.colors.black)",
            "        for k, v in pairs(activeCautions) do",
            "            if k < 5 then",
            "                disp.setFontScale(0.5, 0.6)",
            "                disp.fillRect(cautionX-cautionBoxWidth, y + ((k-1)*(cautionBoxHeight/2)), cautionBoxWidth, cautionBoxHeight/2, PCDSettings.colors.yellow)",
            "                disp.drawCenteredText(cautionX-(cautionBoxWidth) + 5, y + ((k-1)*(cautionBoxHeight/2)) + (cautionBoxHeight/4), v, PCDSettings.colors.black, false, true)",
            "            end",
            "        end",
            "    end",

            "end"
        ]
    },
    "EWO":{
        "buildTrackFiles":[
            "return function(self)",
            "    local trackFiles = {}",

            "    local bodies = sm.body.getAllBodies()",
            "    for index, body in pairs(bodies) do",
            "        local shapes = body:getShapes()",
            "        for i, shape in pairs(shapes) do",
            "            if tostring(shape.uuid) == 'e627986c-b7dd-4365-8fd8-a0f8707af63d' then",
            "                local file = {}",
            "                file.active = shape.interactable.active",
            "                file.power = shape.interactable.power",
            "                file.color = shape.color",
            "                file.body = body",
            "                file.shape = shape",
            "                file.shapeID = shape.id",
            "                file.address = 0",

            "                local parents = shape.interactable:getParents()",
            "                for _, parent in pairs(parents) do",
            "                    if parent.shape.color == sm.color.new('EEEEEE') then",
            "                        file.address = parent.power",
            "                        break",
            "                    end",
            "                end",
            "                local r, g, b = math.floor(shape.color.r*255), math.floor(shape.color.g*255), math.floor(shape.color.b*255)",
            "                local digits = 3",
            "                file.id = string.format('%0'..digits..'d', r)..string.format('%0'..digits..'d', g)..string.format('%0'..digits..'d', b)..file.address",
            "                table.insert(trackFiles, file)",
            "            end",
            "        end",
            "    end",

            "    for k, v in pairs(self.groupTrackFiles) do",
            "        v.parts = {}",
            "    end",

            "    for index, file in pairs(trackFiles) do",
            "        if self.groupTrackFiles[file.id] == nil then",
            "            self.groupTrackFiles[file.id] = {jamming = false, address = 0, data = 0, color = '', parts = {}}",
            "        end",
            "        if file.active and file.power ~= 0 then",
            "            self.groupTrackFiles[file.id].data = file.power",
            "        end",
            "        self.groupTrackFiles[file.id].color = string.sub(file.color:getHexStr(), 1, 6)",
            "        self.groupTrackFiles[file.id].address = file.address",
            "        self.groupTrackFiles[file.id].parts[file.shapeID] = file",
            "    end",
            "    return self.groupTrackFiles",
            "end"
        ],
        "render":[
            "return function(self, panel)",
            "    local disp = PCDSettings.display",
            "    local x, y, w, h, hidden, subpanels = PCDSettings:getPanelPositions(panel)",
            "    disp.setViewport(x, y, w, h)",
            "    disp.fillRect(x, y, w, h, '000000')",
            "    self:buildTrackFiles()",
            "    local index = 0",
            "    local border = {x = 25, y = 100}",
            "    local squareSize = {x = 40, y = 40}",
            "    local lineGap = squareSize.y + 20",
            "    local activeJamming = {}",
            "    for address, val in pairs(self.groupTrackFiles) do",
            "        --print(address, val.jamming)",
            "        disp.fillRect(x + border.x, y + border.y+(lineGap*index), squareSize.x, squareSize.y, val.color)",
            "        setButton(index+2, panel, x + border.x, y + border.y+(lineGap*index), squareSize.x, squareSize.y, function() ",
            "            if val.jamming then",
            "                val.jamming = false",
            "            else",
            "                val.jamming = true",
            "            end",
            "        end",
            "        )",
            "        local transmiterCount = 0",
            "        local receiverCount = 0",
            "        --print('D: '..val.address, val.data, '#'..val.color..val.color..'#FFFFFF '..#val.parts)",
            "        if val.jamming then ",
            "            activeJamming[address] = val",
            "        end",
            "        for index, part in pairs(val.parts) do",
            "            local color = string.sub(part.color:getHexStr(), 1, 6)",
            "            if val.jamming and part.active then",
            "                part.shape.interactable.power = math.random(-10000, 10000)",
            "            end",
            "            if part.active then receiverCount = receiverCount + 1",
            "            else transmiterCount = transmiterCount + 1 end",
            "        end",
            "        local color = val.jamming and '#00FF00' or '#FF0000'",
            "        disp.drawText(x + border.x + squareSize.x+10, y + border.y + (lineGap*index) - 10, 'Adr: '..val.address, color)",
            "        disp.drawText(x + border.x + squareSize.x+325, y + border.y + (lineGap*index) - 10, 'T/R: '..transmiterCount..', '..receiverCount, color)",
            "        --disp.drawText(x + border.x + squareSize.x+500, y + border.y + (lineGap*index) - 10, 'D: '..val.data, color)",
            "        index = index + 1",
            "    end",
            "    CICU.activeJamming = activeJamming",
            "    PCDSettings:drawNavButton(x, y, 'EWO', panel)",
            "end"
        ]
    },
    "stbyGear":{
        "render":[
            "return function(self)",
            "    local handle = CICU.flightControlInputs.landingGear",
            "    local display = self.display",
            "    local lmlg_d = CICU.systemLevels.downlock",
            "    local lmlg_u = CICU.systemLevels.uplock",
            "    local rmlg_d = CICU.systemLevels.downlock",
            "    local rmlg_u = CICU.systemLevels.uplock",
            "    local nlg_d = CICU.systemLevels.downlock",
            "    local nlg_u = CICU.systemLevels.uplock",

            "    display.clear(displayBackgroundColor)",
            "    local threeGreenXOff = 40",
            "    local threeGreenYOff = 5",
            "    display.drawRect(threeGreenXOff+7, threeGreenYOff, 6, 13, '000000')",
            "    display.drawRect(threeGreenXOff, threeGreenYOff+5, 6, 13, '000000')",
            "    display.drawRect(threeGreenXOff+14, threeGreenYOff+5, 6, 13, '000000')",

            "    display.drawRect(threeGreenXOff+8, threeGreenYOff+22, 4, 30, '000000')",
            "    display.fillRect(threeGreenXOff+9, threeGreenYOff+23, 2, 28, '050505')",
            "    if handle == 1 then",
            "        display.fillCircle(threeGreenXOff+9, threeGreenYOff+22, 6, '333333')",
            "        display.fillCircle(threeGreenXOff+9, threeGreenYOff+22, 4, '999999')",
            "    else",
            "        display.fillCircle(threeGreenXOff+9, threeGreenYOff+49, 6, '333333')",
            "        display.fillCircle(threeGreenXOff+9, threeGreenYOff+49, 4, '999999')",
            "    end",
            "    if lmlg_d == 1 then",
            "        display.fillRect(threeGreenXOff+1, threeGreenYOff+6, 4, 11, '00ff00')",
            "    elseif lmlg_u == 1 then",
            "        display.fillRect(threeGreenXOff+1, threeGreenYOff+6, 4, 11, '050505')",
            "    else",
            "        display.fillRect(threeGreenXOff+1, threeGreenYOff+6, 4, 11, 'ff0000')",
            "    end",

            "    if rmlg_d == 1 then",
            "        display.fillRect(threeGreenXOff+15, threeGreenYOff+6, 4, 11, '00ff00')",
            "    elseif rmlg_u == 1 then",
            "        display.fillRect(threeGreenXOff+15, threeGreenYOff+6, 4, 11, '050505')",
            "    else",
            "        display.fillRect(threeGreenXOff+15, threeGreenYOff+6, 4, 11, 'ff0000')",
            "    end",

            "    if nlg_d == 1 then",
            "        display.fillRect(threeGreenXOff+8, threeGreenYOff+1, 4, 11, '00ff00')",
            "    elseif nlg_u == 1 then",
            "        display.fillRect(threeGreenXOff+8, threeGreenYOff+1, 4, 11, '050505')",
            "    else",
            "        display.fillRect(threeGreenXOff+8, threeGreenYOff+1, 4, 11, 'ff0000')",
            "    end",
            "end"
        ]
    },
    "fcDisplay":{
        "render":[
            "return function(self)",
            "    local display = self.display",
            "    display.clear()",
            "    local displayTextColor = '00AA00'",
            "    local rx, ry = display.getWidth(), display.getHeight()",
            "    display.drawLine(2, ry/2, rx-3, ry/2, displayTextColor)",
            "    display.drawLine(rx/2, 2, rx/2, ry-3, displayTextColor)",
            "    local pitch = CICU.flightControlInputs.pitch",
            "    local roll = CICU.flightControlInputs.roll",
            "    local yaw = CICU.flightControlInputs.yaw",

            "    local pitchLine = ry/2 + (-pitch*((ry/2)-3))",
            "    local rollLine = rx/2 + (roll*((rx/2)-3))",
            "    local yawLine = (yaw*rx/2)",

            "    display.drawLine(rollLine, (ry/2)-3, rollLine, (ry/2)+3)",
            "    display.drawLine((rx/2)-3+yawLine, pitchLine, (rx/2)+3+yawLine, pitchLine)",
            "    display.drawPixel(rollLine, pitchLine, 'ff00ff')",
            "end"
        ]
    },
    "throttles":{
        "render":[
            "return function(self) ",

            "    local display = self.display",
            "    local lt_throttle = 1-((CICU.flightControlInputs.throttle*CICU.flightControlInputs.engineTilt)*2)",
            "    local rt_throttle = 1-((CICU.flightControlInputs.throttle*(1-CICU.flightControlInputs.engineTilt))*2)",

            "    local throttleLowColor = '4d0006'",
            "    local throttleLowActivatedColor = 'ab000d'",
            "    local throttleMidColor = '6e6600'",
            "    local throttleMidActivatedColor = 'f0de02'",
            "    local throttleHighColor = '015c05'",
            "    local throttleHighActivatedColor = '04cf0d'",
            "    local heightBoarder = 10",
            "    local widthBoarder = 20",
            "    local throttleThickness = 8",
            "    local throttleGap = 5",
            "    local width = display.getWidth()",
            "    local height = display.getHeight()",
            "    local xOff = -15",
            "    local yOff = 7",
            "    local throttleSegmentSize = (height-(heightBoarder*2)-2)/3",
            "    local leftThrottleInput = lt_throttle",
            "    local leftThrottlePos = 3 - (((math.min(math.max(-1, leftThrottleInput), 1)+1)/2)*3)",
            "    local rightThrottleInput = rt_throttle",
            "    local rightThrottlePos = 3 - (((math.min(math.max(-1, rightThrottleInput), 1)+1)/2)*3)",

            "    local lowThreshold = heightBoarder+yOff+1+(throttleSegmentSize*2)",
            "    local midThreshold = heightBoarder+yOff+1+throttleSegmentSize",
            "    local highThreshold = heightBoarder+yOff",

            "    display.fillRect(widthBoarder+xOff+1, heightBoarder+yOff+1, throttleThickness-2, throttleSegmentSize, throttleHighColor)",
            "    display.fillRect(width - widthBoarder - throttleThickness+xOff+1, heightBoarder+yOff+1, throttleThickness-2, throttleSegmentSize, throttleHighColor)",

            "    display.fillRect(widthBoarder+xOff+1, heightBoarder+yOff+1+throttleSegmentSize, throttleThickness-2, throttleSegmentSize, throttleMidColor)",
            "    display.fillRect(width - widthBoarder - throttleThickness+xOff+1, heightBoarder+yOff+1+throttleSegmentSize, throttleThickness-2, throttleSegmentSize, throttleMidColor)",

            "    display.fillRect(widthBoarder+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize*2), throttleThickness-2, throttleSegmentSize, throttleLowColor)",
            "    display.fillRect(width - widthBoarder - throttleThickness+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize*2), throttleThickness-2, throttleSegmentSize, throttleLowColor)",

            "    if 1 > leftThrottlePos and leftThrottlePos > 0 then",
            "        display.fillRect(widthBoarder+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize*3)-throttleSegmentSize*(leftThrottlePos), throttleThickness-2, math.ceil(throttleSegmentSize*(leftThrottlePos)), throttleLowActivatedColor)",
            "    elseif 2 > leftThrottlePos and leftThrottlePos >= 1 then",
            "        display.fillRect(widthBoarder+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize*3)-throttleSegmentSize, throttleThickness-2, throttleSegmentSize, throttleLowActivatedColor)",
            "        display.fillRect(widthBoarder+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize*2), throttleThickness-2, -throttleSegmentSize*(leftThrottlePos-1), throttleMidActivatedColor)",
            "    elseif 3 >= leftThrottlePos and leftThrottlePos >= 2 then",
            "        display.fillRect(widthBoarder+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize*3)-throttleSegmentSize, throttleThickness-2, throttleSegmentSize, throttleLowActivatedColor)",
            "        display.fillRect(widthBoarder+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize*2), throttleThickness-2, -throttleSegmentSize, throttleMidActivatedColor)",
            "        display.fillRect(widthBoarder+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize), throttleThickness-2, -throttleSegmentSize*(leftThrottlePos-2), throttleHighActivatedColor)",
            "    end",

            "    if 1 > rightThrottlePos and rightThrottlePos > 0 then",
            "        display.fillRect(width - widthBoarder - throttleThickness+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize*3)-throttleSegmentSize*(rightThrottlePos), throttleThickness-2, math.ceil(throttleSegmentSize*(rightThrottlePos)), throttleLowActivatedColor)",
            "    elseif 2 > rightThrottlePos and rightThrottlePos >= 1 then",
            "        display.fillRect(width - widthBoarder - throttleThickness+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize*3)-throttleSegmentSize, throttleThickness-2, throttleSegmentSize, throttleLowActivatedColor)",
            "        display.fillRect(width - widthBoarder - throttleThickness+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize*2), throttleThickness-2, -throttleSegmentSize*(rightThrottlePos-1), throttleMidActivatedColor)",
            "    elseif 3 >= rightThrottlePos and rightThrottlePos >= 2 then",
            "        display.fillRect(width - widthBoarder - throttleThickness+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize*3)-throttleSegmentSize, throttleThickness-2, throttleSegmentSize, throttleLowActivatedColor)",
            "        display.fillRect(width - widthBoarder - throttleThickness+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize*2), throttleThickness-2, -throttleSegmentSize, throttleMidActivatedColor)",
            "        display.fillRect(width - widthBoarder - throttleThickness+xOff+1, heightBoarder+yOff+1+(throttleSegmentSize), throttleThickness-2, -throttleSegmentSize*(rightThrottlePos-2), throttleHighActivatedColor)",
            "    end",
            "    display.drawRect(widthBoarder+xOff, heightBoarder+yOff, throttleThickness, height-(heightBoarder*2), '000000')",
            "    display.drawRect(width - widthBoarder - throttleThickness+xOff, heightBoarder+yOff, throttleThickness, height-(heightBoarder*2), '000000')",

            "    --RT AP Throttle",
            "    --display.drawLine(width - widthBoarder - throttleThickness+xOff-3, heightBoarder+yOff+1+(throttleSegmentSize*(3-math.floor(APThrottlePos)))-throttleSegmentSize*(APThrottlePos-math.floor(APThrottlePos)), width - widthBoarder+xOff+2, heightBoarder+yOff+1+(throttleSegmentSize*(3-math.floor(APThrottlePos)))-throttleSegmentSize*(APThrottlePos-math.floor(APThrottlePos)), 'ff0000')",
            "    --RT Throttle",
            "    display.drawLine(width - widthBoarder - throttleThickness+xOff-3, heightBoarder+yOff+1+(throttleSegmentSize*(3-math.floor(rightThrottlePos)))-throttleSegmentSize*(rightThrottlePos-math.floor(rightThrottlePos)), width - widthBoarder+xOff+2, heightBoarder+yOff+1+(throttleSegmentSize*(3-math.floor(rightThrottlePos)))-throttleSegmentSize*(rightThrottlePos-math.floor(rightThrottlePos)), 'ffffff')",
            "    --LT Throttle",
            "    display.drawLine(widthBoarder+xOff-3, heightBoarder+yOff+1+(throttleSegmentSize*(3-math.floor(leftThrottlePos)))-throttleSegmentSize*(leftThrottlePos-math.floor(leftThrottlePos)), widthBoarder+throttleThickness+xOff+2, heightBoarder+yOff+1+(throttleSegmentSize*(3-math.floor(leftThrottlePos)))-throttleSegmentSize*(leftThrottlePos-math.floor(leftThrottlePos)), 'ffffff')",
            "end"
        ]
    }
}